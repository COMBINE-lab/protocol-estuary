
// feature barcoding can have three parts
// 1. antibody barcoding (optional)
// 2. cell multiplexing (optional)
// 3. RNA (required)
#############################################################################
# README:

# *IMPORTANT*: You need to follow the instruction to fill in all required information for each experiment (or remove the whole field named by it).

# To modify an argument, please replace the Right hand side of each field (separated by `:`) with your value **wrapped in quotes**.
# For example, you can replace `"output": null` in the meta_info section with `"output": "/path/to/output/dir"`, and `"threads": null` with `"threads": "16"`

# All fields that are null, empty array ([]), and empty dictionary ({}) will be pruned (ignored).

# If you don"t have the antibody barcoding tag (ADT) and/or cell hash tag oligo (HTO) reads, 
# you can remove the whole fields related to them or chance the "Step" of their commands as a quoted negative integer.
# For example, you can change the field with name "HTO" to `"HTO": {}` in the main section *and* section "Optional Configuration",
# or you can change the Step of its realted commands, namely "simpleaf index", "simpleaf quant", "HTO ref gunzip" and
# "HTO reference CSV to FASTA" to quoted negative integers, for example, "-1".

# If you want tyo skip invoking some commands, for example, when the exactly same command had been run before, 
# you can also change their "Exectution Order" to a quoted negative integer, for example, "-1". 
# Simpleaf will ignore all commands with a negative Step. 

# NOTE: You can pass optional simpleaf arguments specified in the "Optional Config" section.

#############################################################################

local workflow = {

    // Meta information
    "meta_info": {
        "template_name":  "CITE-seq (10x Chromium 3' v2)",
        "template_id": "citeseq_10xv2",
        "template_version": "0.0.1",
        // This value will be assigned to all simpleaf commands that have no --threads arg specified
        // Optional: commands will use their default setting if this is null.

        "threads": null, // "threads": "16",
        
        // The parent directory of all simpleaf command output folders.
        // If this is leaved as null, you have to specify `--output` when running `simpleaf workflow`
        "output": null, // "output": "/path/to/output",

    },

#######################################################################################################################
// *Recommended* Configuration: 
//  For MOST users, the fields listed in the "Recommended Configuration" section are the only fields
//  that needs to be filled. You should replace all null values with valid values, 
//  as described in the comment lines (those start with double slashes `//`) .

//  For advanced users, you can check other simpleaf arguments listed in the "Optional Configurtion" section.
######################################################################################################################
    
    // **For most users**, ONLY the information in the "Recommended Simpleaf Configuration" section needs to be completed.
    // For advanced usage, please check the "Optional Configuration" field.
    "Recommended Simpleaf Configuration": {
        // Information needed to process RNA reads
        "RNA": {
            // Arguments for running `simpleaf index`
            "simpleaf_index": {
                // these two fields are required for all command records.
                "Step": "1",
                "Program Name": "simpleaf index",
                // Recommeneded Reference: spliced + intronic transcriptome (splici) 
                // https://pyroe.readthedocs.io/en/latest/building_splici_index.html#preparing-a-spliced-intronic-transcriptome-reference
                // You can find other reference options in the "Optional Configuration" field. You must choose one type of reference
                "spliced+intronic (splici) reference": {
                    // genome fasta file of the studied species
                    "--fasta": null,
                    // gene annotation gtf file of the studied species
                    "--gtf": null,
                    // read length, usually it is 98 for 10xv2 datasets.
                    "--rlen": null,
                },
            },

            // Arguments for running `simpleaf quant`
            "simpleaf quant": {
                "Step": "2",
                "Program Name": "simpleaf quant",
                // Recommended Mapping Option: Mapping reads against the splici reference generated by the simpleaf index command above.
                // Other mapping options can be found in the "Optional Configuration" section
                "Recommended Mapping option": {
                    "Mapping Reads FASTQ Files": {
                        // read1 (technical reads) files separated by comma (,)
                        "--reads1": null,

                        // read2 (biological reads) files separated by comma (,)
                        "--reads2": null,
                    },
                },
            }
        },

        // This field contains all the information for analyzing cell surface protein barcoding (ADT) reads
        // Only required information are listed here. 
        // For optional arguments, Please check the "Optional Arguments" field.
        "ADT": {
            // Arguments used for running `simpleaf index`
            // This is required UNLESS you have an existing salmon index. In that case, you can change the Step of this "simpleaf index" command in the "Optional Configuration" to a quoted negative integer.
            "simpleaf index": {
                "Step": "9",
                "Program Name": "simpleaf index",
                // The path to the antibody derived tags' (ADT) reference barcode CSV file
                // The file should ends with .csv or .csv.gz.
                // If your file is already in FASTA format, use that as the "--ref-seq" field in the Optional Configuration
                // and leave this field as null.
                "ADT reference barcode CSV file path": null,
            },

            // arguments for running `simpleaf quant`
            "simpleaf quant": {
                "Step": "10",
                "Program Name": "simpleaf quant",
                // Map sequencing reads against the reference index generated by simpleaf index call
                "Recommended Mapping Option": {
                        // read1 (technical reads) files separated by comma (,)
                        "--reads1": null,

                        // read2 (biological reads) files separated by comma (,)
                        "--reads2": null,
                    },
            },
        },

        // This field contains all the information for analyzing cell multiplexing barcoding or sample hashing (HTO) reads.
        // Only required information are listed here.
        // For optional arguments, Please refer to the "Optional Arguments" field.
        "HTO": {
            // arguments used for running `simpleaf index`
            // This is not required if you have an existing salmon index
            // In that case, you can remove the whole "simpleaf index" field
            // and specify the path to the index using `-index` in the `simpleaf quant` field 
            "simpleaf index": {
                "Step": "11",
                "Program Name": "simpleaf index",
                // The path to the hash tag oligos (ADT) reference barcode CSV file
                // The file should be ending with .csv or .csv.gz.
                // Current we do not support other format.
                "HTO reference barcode CSV file path": null,
            },

            // arguments for running `simpleaf quant`
            "simpleaf quant": {
                "Step": "12",
                "Program Name": "simpleaf quant",
                // Map sequencing reads against the reference index generated by simpleaf index call
                "Recommended Mapping Option": {
                        // read1 (technical reads) files separated by comma (,)
                        "--reads1": null,

                        // read2 (biological reads) files separated by comma (,)
                        "--reads2": null,
                },
            },
        },
    },
##########################################################################################################
// OPTIONAL : The configuration options below are optional, and may be of most interest to advanced users
#########################################################################################################

    "Optional Simpleaf Configuration": {
        // Optional arguments for processing RNA reads
        "RNA": {
            // Optioanal arguments for running `simpleaf index`
            "simpleaf index": {
                // The Step of this command
                "Step": '1',

                "Other Reference Options": {
                    // spliced + unspliced transcriptome
                    // https://pyroe.readthedocs.io/en/latest/building_splici_index.html#preparing-a-spliced-unspliced-transcriptome-reference
                    "1. spliced+unspliced (spliceu)": {
                        // specify reference type as spliced+unspliced (spliceu)
                        "--ref-type": null, // "--ref-type": "spliced+unspliced",
                        // The path to the genome FASTA file
                        "--fasta": null,
                        // The path to the gene annotation GTF file
                        "--gtf": null,
                    },

                    // Direct Reference
                    // If the species doesn"t have its genome available,
                    // you can pass the reference sequence FASTA file as `--ref-seq`.
                    // simpleaf will build index directly using the given file 
                    "2. Direct Reference": {
                        // The path to the reference sequence FASTA file
                        "--ref-seq": null,
                    },
                },
                // If null, this argument will be automatically completed by the template.
                "--output": null,
                "--spliced": null,
                "--unspliced": null,
                "--threads": null,
                "--dedup": null,
                "--sparse": null,
                "--kmer-length": null,
                "--overwrite": null,
                "--use-piscem": null,
                "--minimizer-length": null,
                "--keep-duplicates": null,
            },
            // arguments for running `simpleaf quant`
            "simpleaf quant": {
                // The Step of this command
                "Step": '2',

                // the transcript name to gene name mapping TSV file.
                // Simpleaf will find the correct t2g map file for splici and spliceu reference.
                // This is required ONLY if `--ref-seq` is specified in the corresponding simpleaf index command. 
                "--t2g-map": null,

                "Other Mapping Options": {
                    // Option 1:
                    // If you have built the reference index already, 
                    // you can change the Step of the simpleaf index call above to a quoted negative integer,
                    // and specify the path to the index here  
                    "1. Mapping Reads FASTQ Files against an existing index": {
                        // read1 (technical reads) files separated by comma (,)
                        "--reads1": null,

                        // read2 (biological reads) files separated by comma (,)
                        "--reads2": null,

                        // the path to an EXISTING salmon/piscem reference index
                        "--index": null
                    },

                    // Option 2:
                    // Choose only if you have an existing mapping directory and don"t want to rerun mapping
                    "2. Existing Mapping Directory": {
                        // the path to an existing salmon/piscem mapping result directory
                        "--map-dir": null,
                    },
                },

                "Cell Filtering Options": {
                    // No cell filtering, but correct cell barcodes according to a permitlist file
                    // If you would like to use other cell filtering options, please change this field to null,
                    // and select one cell filtering strategy listed in the "Optional Configuration section"
                    // DEFAULT
                    "--unfiltered-pl": "", // or "--unfiltered-pl": null 

                    // 2. knee finding cell filtering. If choosing this, change the value from null to "".
                    "--knee": null, // or "--knee": "",

                    // 3. A hard threshold. If choosing this, change the value from null to an integer
                    "--forced-cells": null, // or "--forced-cells": "INT", for example, "--forced-cells": "3000"

                    // 4. A soft threshold. If choosing this, change the null to an integer
                    "--expect-cells": null, //or "--expect-cells": "INT", for example, "--expect-cells": "3000"

                    // 5. filter cells using an explicit whitelist. Only use when you know exactly the 
                    // true barcodes. 
                    // If choosing this, change the null to the path to the whitelist file. 
                    "--explicit-pl": null, // or "--explicit-pl": "/path/to/pl",
                },
                "--chemistry": "10xv2",
                "--resolution": "cr-like",
                "--expected-ori": "fw",

                // If null, this argument will be automatically completed by the template.
                "--output": null,

                // If "--threads" is null but the "threads" meta info field is not,
                // "threads" meta data will be used to complete this "--threads".
                "--threads": null,

                "--min-reads": null,
                "--use-piscem": null,
                "--use-selective-alignment": null,

            }
        },
        "ADT": {
            // arguments used for running `simpleaf index`
            "simpleaf index": {
                // The Step of this command
                "Step": "9",

                // The path to the reference sequence FASTA file
                // Only change this if the tag barcode reference file is in the FASTA format
                "--ref-seq": null,

                "--kmer-length": "7",
                "--output": null,
                "--threads": null,
                "--sparse": null,
                "--overwrite": null,
                "--use-piscem": null,
                "--minimizer-length": null,
                "--keep-duplicates": null,
            },

            // Optional arguments for running `simpleaf quant`
            "simpleaf quant": {
                // The Step of this experiment
                "Step": "10",

                // the transcript name to gene name mapping TSV file
                // This is required if `--ref-seq` is specified in the corresponding simpleaf index command. 
                "--t2g-map": null,

                "Other Mapping Options": {
                    // Option 1:
                    // If you have built the reference index already, 
                    // you can leave the simpleaf index section unchanged
                    // and specify the path to the index here  
                    "1. Mapping Reads FASTQ Files against an existing index": {
                        // read1 (technical reads) files separated by comma (,)
                        "--reads1": null,

                        // read2 (biological reads) files separated by comma (,)
                        "--reads2": null,

                        // the path to an existing salmon/piscem reference index
                        "--index": null
                    },

                    // Option 2:
                    // Choose only if you have an existing mapping directory and don"t want to rerun mapping
                    "2. Existing Mapping Directory": {
                        // the path to an existing salmon/piscem mapping result directory
                        "--map-dir": null,
                    },
                },

                // By default, the workflow will use the reported cell barcodes in the gene count matrix
                // obtained from processing RNA reads as the explicit permit list for feature barcoding reads.
                // If you want to choose another cell fitlering option, please specify one of the followings.
                "Other Cell Filtering Options": {
                    // 1. No cell filtering, but correct cell barcodes according to a permitlist file
                    //    if you don"t want to use this, change the value from "" to null. 
                    // *RECOMMENDED*
                    "--unfiltered-pl": null, // or "--unfiltered-pl": "" 

                    // 2. knee finding cell filtering. If choosing this, change the value from null to "".
                    "--knee": "", // or "--knee": null,

                    // 3. A hard threshold. If choosing this, change the value from null to an integer
                    "--forced-cells": null, // or "--forced-cells": "INT", for example, "--forced-cells": "3000"

                    // 4. A soft threshold. If choosing this, change the null to an integer
                    "--expect-cells": null, //or "--expect-cells": "INT", for example, "--expect-cells": "3000"

                    // 5. filter cells using an explicit whitelist. Only use when you know exactly the 
                    // true barcodes. 
                    // If choosing this, change the null to the path to the whitelist file. 
                    "--explicit-pl": null, // or "--explicit-pl": "/path/to/pl",
                },
                "--chemistry": "1{b[16]u[10]}2{r[15]}",
                "--resolution": "cr-like",
                "--expected-ori": "fw",

                // If null, this argument will be automatically completed by the template.
                "--output": null,
                "--threads": null,
                "--min-reads": null,
                "--index": null,
                "--use-piscem": null,
                "--use-selective-alignment": null,
            },
        },
        "HTO": {
            // arguments used for running `simpleaf index`
            "simpleaf index": {
                // The Step of this command
                "Step": "11",

                // The path to the reference sequence FASTA file
                // Only change this if the tag barcode reference file is in the FASTA format
                "--ref-seq": null,

                "--kmer-length": "7",
                "--output": null,
                "--threads": null,
                "--sparse": null,
                "--overwrite": null,
                "--use-piscem": null,
                "--minimizer-length": null,
                "--keep-duplicates": null,
            },

            // Optional arguments for running `simpleaf quant`
            "simpleaf quant": {
                // The Step of this experiment
                "Step": "12",

                // the transcript name to gene name mapping TSV file
                // This is required if `--ref-seq` is specified in the corresponding simpleaf index command. 
                "--t2g-map": null,

                "Other Mapping Options": {
                    // Option 1:
                    // If you have built the reference index already, 
                    // you can leave the simpleaf index section unchanged
                    // and specify the path to the index here  
                    "1. Mapping Reads FASTQ Files against an existing index": {
                        // read1 (technical reads) files separated by comma (,)
                        "--reads1": null,

                        // read2 (biological reads) files separated by comma (,)
                        "--reads2": null,

                        // the path to an existing salmon/piscem reference index
                        "--index": null
                    },

                    // Option 2:
                    // Choose only if you have an existing mapping directory and don"t want to rerun mapping
                    "2. Existing Mapping Directory": {
                        // the path to an existing salmon/piscem mapping result directory
                        "--map-dir": null,
                    },
                },

                // By default, the workflow will use the reported cell barcodes in the gene count matrix
                // obtained from processing RNA reads as the explicit permit list for feature barcoding reads.
                // If you want to choose another cell fitlering option, please specify one of the followings.
                "Other Cell Filtering Options": {
                    // 1. No cell filtering, but correct cell barcodes according to a permitlist file
                    //    if you don"t want to use this, change the value from "" to null. 
                    // *RECOMMENDED*
                    "--unfiltered-pl": null, // or "--unfiltered-pl": "" 
                    
                    // 2. knee finding cell filtering. If choosing this, change the value from null to "".
                    "--knee": "", // or "--knee": null,

                    // 3. A hard threshold. If choosing this, change the value from null to an integer
                    "--forced-cells": null, // or "--forced-cells": "INT", for example, "--forced-cells": "3000"

                    // 4. A soft threshold. If choosing this, change the null to an integer
                    "--expect-cells": null, //or "--expect-cells": "INT", for example, "--expect-cells": "3000"

                    // 5. filter cells using an explicit whitelist. Only use when you know exactly the 
                    // true barcodes. 
                    // If choosing this, change the null to the path to the whitelist file. 
                    "--explicit-pl": null, // or "--explicit-pl": "/path/to/pl",
                },
                "--chemistry": "1{b[16]u[10]}2{r[15]}",
                "--resolution": "cr-like",
                "--expected-ori": "fw",

                // If null, this argument will be automatically completed by the template.
                "--output": null,
                "--threads": null,
                "--min-reads": null,
                "--index": null,
                "--use-piscem": null,
                "--use-selective-alignment": null,
            },
        },
    },

##########################################################################################################
// External Commands: The external linux commands that will be run during the execution of the workflow
// README:
// This section records the shell commands that will be called during the execution of the workflow.
// Each subfield should have an unique name and contain the complete information for involing a linux command.
// All shell command fields should match the following format:
//      1. There should be a "Program Name" field that records the path to the program. 
//          For programs in your PATH env varible, for example, `awk`, this can just be the program name.
//          For local programs, you need to specify the path to the executable of that program, for example, 
//          if you have a local compile of bedtools, you need to say "path/to/bedtools"
//      2. There should be a "Step" field that indicates the Step of the command. 
//          Commands with `"Step": "0"` will be ignored by simpleaf and will not be executed. 
//          Simpleaf workflow will sort all simpleaf commands and external program commands defined in a workflow
//          by their Step to decide the final Step. 
//      3. All rest fields should be named by a quoted integer, for example, "1", "15". 
//          The number indicates the order of the argument in the complete command.
//          Simpleaf will sort the numbers and complete the program call using that order.
//          For example, 
//              {
//               "Program Name": "ls",
//               "Step": "1",
//               "1": "-lh",
//               "2": "/path/to/dir"
//              }
//          will be interpreted as `ls -lh /path/to/dir` and will be executed 
//          before any (simpleaf or external program) commands with an Step larger than 1.
#########################################################################################################


    "External Commands": {

        // This command is used for converting the 
        // reference feature barcodes' TSV file into FASTA file
        // before building the index
        "HTO ref gunzip": {
            "Step": "3",
            "Program Name": "gunzip",
            "1": "-c",
            "2": "TBD",
            "3": ">",
            "4": "TBD",
        },

        // This command is used for converting the 
        // reference feature barcodes' TSV file into FASTA file
        // before building the index
        "ADT ref gunzip": {
            "Step": "4",
            "Program Name": "gunzip",
            "1": "-c",
            "2": "TBD",
            "3": ">",
            "4": "TBD",
        },


        // This command is used for converting the 
        // reference feature barcodes' TSV file into FASTA file
        // before building the index
        "HTO reference CSV to t2g": {
            "Step": "5",
            "Program Name": "awk",
            "1": "-F",
            "2": "','",
            "3": "'NR>1 {sub(/ /,\"_\",$1);print $1\"\\t\"$1}'",
            "4": "TBD",
            "5": ">",
            "6": "TBD"
        },

        // This command is used for converting the 
        // reference feature barcodes' TSV file into FASTA file
        // before building the index
        "ADT reference CSV to t2g": {
            "Step": "6",
            "Program Name": "awk",
            "1": "-F",
            "2": "','",
            "3": "'NR>1 {sub(/ /,\"_\",$1);print $1\"\\t\"$1}'",
            "4": "TBD",
            "5": ">",
            "6": "TBD"
        },

        // This command is used for converting the 
        // reference feature barcodes' TSV file into FASTA file
        // before building the index
        "HTO reference CSV to FASTA": {
            "Step": "7",
            "Program Name": "awk",
            "1": "-F",
            "2": "','",
            "3": "'NR>1 {sub(/ /,\"_\",$1);print \">\"$1\"\\n\"$4}'",
            "4": "TBD",
            "5": ">",
            "6": "TBD"
        },
        
        // This command is used for converting the 
        // reference feature barcodes' TSV file into FASTA file
        // before building the index
        "ADT reference CSV to FASTA": {
            "Step": "8",
            "Program Name": "awk",
            "1": "-F",
            "2": "','",
            "3": "'NR>1 {sub(/ /,\"_\",$1);print \">\"$1\"\\n\"$4}'",
            "4": "TBD",
            "5": ">",
            "6": "TBD"
        },
    },
};


##########################################################################################################
// PLEASE DO NOT CHANGE ANYTHING BELOW THIS LINE
// The content below is used for parsing the config file in simpleaf internally.
#########################################################################################################

// local template = import "cite-seq_only_required.jsonnet";
local utils = import "utils.libsonnet";
// local utils = std.extVar("utils");


// 1. if the reference csv file is provided for ADT and/or HTO, then file 
// 1. if --ref-seq is in both HTO and ADT, turn off awk calls for converting csv to t2g
// 2. if --t2g-map is in both HTO and ADT, turn off awk calls 
local activate_ext_calls(workflow, output_path, fb_ref_path) = 
    // check the existence of cell multiplexing experiment
    local hto = utils.get(workflow, "HTO", use_default = true);
    // check the existence of simpleaf index command
    local hto_index = if hto == null then null else utils.get(hto, "simpleaf index", use_default = true);
    local hto_quant = if hto == null then null else utils.get(hto, "simpleaf quant", use_default = true);
    // check the existence of `--ref-seq`
    local hto_index_refseq = if hto_index == null then null else utils.get(hto, "--ref-seq", use_default = true);
    local hto_quant_t2g = if hto_index == null then null else utils.get(hto, "--t2g-map", use_default = true);
    local hto_ref_csv_path = output_path + "/hto_reference.csv";
    local hto_fasta_path = output_path + "/hto_reference_barcode.fasta";
    local hto_t2g_path = output_path + "/hto_t2g.tsv";

    // check the existence of cell surface protein barcoding experiment
    local adt = utils.get(workflow, "ADT", use_default = true);
    // check the existence of simpleaf index command
    local adt_index = if adt == null then null else utils.get(adt, "simpleaf index", use_default = true);
    local adt_quant = if adt == null then null else utils.get(adt, "simpleaf quant", use_default = true);
    // check the existence of `--ref-seq`
    local adt_index_refseq = if adt_index == null then null else utils.get(adt, "--ref-seq", use_default = true);
    local adt_quant_t2g = if adt_index == null then null else utils.get(adt, "--t2g-map", use_default = true);
    local adt_ref_csv_path = output_path + "/adt_reference_barcode.csv";
    local adt_fasta_path = output_path + "/adt_reference_barcode.fasta";
    local adt_t2g_path = output_path + "/adt_t2g.tsv";

    {
        // Update HTO ref-seq as the output of awk command
        [if hto != null then "HTO"] +: {
            [if hto_index != null then "simpleaf index"]+: {
                [if hto_index_refseq == null && fb_ref_path.hto != null then "--ref-seq"]: hto_fasta_path,
            },

            [if hto_quant != null then "simpleaf quant"]+: {
                [if hto_quant_t2g == null && fb_ref_path.hto != null then "--t2g-map"]: hto_t2g_path,
            }
        },

        // Update ADT ref-seq as the output of awk command
        [if adt != null then "ADT"] +: {
            [if adt_index != null then "simpleaf index"]+: {
                [if adt_index_refseq == null then "--ref-seq"]: adt_fasta_path,
            },

            [if adt_quant != null then "simpleaf quant"]+: {
                [if adt_quant_t2g == null then "--t2g-map"]: adt_t2g_path,
            }
        },

        // Add output file to awk commands.
        "External Commands" +: {
            "HTO ref gunzip" +: {
                [if !std.endsWith(fb_ref_path.hto, "gz") then "Step"]: "-1",
                "2": fb_ref_path.hto,
                "4": hto_ref_csv_path,
            },

            // This command is used for converting the 
            // reference feature barcodes' TSV file into FASTA file
            // before building the index

            "ADT ref gunzip" +: {
                [if !std.endsWith(fb_ref_path.adt, "gz") then "Step"]: "-1",
                "2": fb_ref_path.adt,
                "4": adt_ref_csv_path,
            },

            // This command is used for converting the 
            // reference feature barcodes' TSV file into FASTA file
            // before building the index
            "ADT reference CSV to FASTA" +: {
                [if adt_index_refseq != null then "Step"]: "-1",
                "4": if std.endsWith(fb_ref_path.adt, "gz") then adt_ref_csv_path else fb_ref_path.adt ,
                "6": adt_fasta_path,
            },

            // This command is used for converting the 
            // reference feature barcodes' TSV file into FASTA file
            // before building the index
            "HTO reference CSV to FASTA" +: {
                [if hto_index_refseq != null then "Step"]: "-1",
                "4": if std.endsWith(fb_ref_path.hto, "gz") then hto_ref_csv_path else fb_ref_path.hto ,
                "6": hto_fasta_path,
            },

            // This command is used for converting the 
            // reference feature barcodes' TSV file into FASTA file
            // before building the index
            "ADT reference CSV to t2g" +: {
                [if adt_index_refseq != null then "Step"]: "-1",
                "4": if std.endsWith(fb_ref_path.adt, "gz") then adt_ref_csv_path else fb_ref_path.adt ,
                "6": adt_t2g_path,
            },

            // This command is used for converting the 
            // reference feature barcodes' TSV file into FASTA file
            // before building the index
            "HTO reference CSV to t2g" +: {
                [if hto_index_refseq != null then "Step"]: "-1",
                "4": if std.endsWith(fb_ref_path.hto, "gz") then hto_ref_csv_path else fb_ref_path.hto ,
                "6": hto_t2g_path,
            },
        },
    };

local get_fb_ref_path(workflow) = 
    // check the existence of cell multiplexing experiment
    local hto = utils.get(workflow["Recommended Simpleaf Configuration"], "HTO", use_default = true);
    // check the existence of simpleaf index command
    local hto_index = utils.get(hto, "simpleaf index", use_default = true);
    // check the existence of `--ref-seq`1
    local hto_ref_path = utils.get(hto_index, "HTO reference barcode CSV file path", use_default = true);
    // check the existence of cell surface barcoding experiment
    local adt = utils.get(workflow["Recommended Simpleaf Configuration"], "ADT", use_default = true);
    // check the existence of simpleaf index command
    local adt_index = utils.get(adt, "simpleaf index", use_default = true);
    // check the existence of `--ref-seq`1
    local adt_ref_path = utils.get(adt_index, "ADT reference barcode CSV file path", use_default = true);

    // 
    {
        "hto": hto_ref_path,
        "adt": adt_ref_path
    }
;


function(output=null)
// function(write_required_args=false,output=null)
    // if write_required_args then
    //     utils.write_required_args(template)
    // else
        // 1. we process some fields to get required information
        local valid_output = utils.get_output(output, workflow);
        local fb_ref_path = get_fb_ref_path(workflow);

        // local flatten_user = utils.flat_arg_groups(user);
        local workflow1 = utils.combine_main_sections(workflow);
        local workflow2 = utils.add_outdir(workflow1, valid_output);
        // local workflow3 = workflow2 + utils.add_explicit_pl(workflow2);
        local workflow3 = utils.add_threads(workflow2);

        // post processing. 
        // decide if running external program calls.
        local workflow4 = workflow3 + activate_ext_calls(workflow3, valid_output, fb_ref_path);
        local workflow5 = utils.add_index_dir_for_simpleaf_index_quant_combo(workflow4);
        workflow5

